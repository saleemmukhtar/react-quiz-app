{"version":3,"sources":["components/FetchButton.js","components/Popup.js","components/Question.js","components/FinalScreen.js","App.js","Reducer.js","index.js"],"names":["FetchButton","props","questionAmount","useSelector","state","options","amount_of_questions","dispatch","useDispatch","setLoading","value","type","loading","handleQuery","a","apiUrl","fetch","then","res","json","response","results","questions","Button","variant","className","onClick","size","text","Popup","Modal","show","centered","Header","Title","Body","dangerouslySetInnerHTML","__html","Footer","decodeHTML","html","txt","document","createElement","innerHTML","Question","useState","setQuestions","selectedAnswer","setSelectedAnswer","score","answerSelected","setAnswerSelected","questionIndex","index","encodedQuestions","questionStatus","question","answer","correct_answer","setOptions","useEffect","decodedQuestions","map","q","incorrect_answers","max","answers","splice","length","Math","floor","random","handleListItemClick","event","target","textContent","handleQuesNavigation","name","getClass","option","Card","bg","Text","i","FinalScreen","checkStatus","selected","undefined","Table","striped","bordered","hover","App","initState","Reducer","action","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.5b958559.chunk.js","sourcesContent":["import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Button } from \"react-bootstrap\";\n\nfunction FetchButton(props) {\n  const questionAmount = useSelector(state => state.options.amount_of_questions)\n  const dispatch = useDispatch();\n\n  const setLoading = value => {\n    dispatch({\n      type: 'CHANGE_LOADING',\n      loading: value\n    })\n  }\n  const setQuestions = value => {\n    dispatch({\n      type: 'SET_QUESTIONS',\n      questions: value\n    })\n  }\n\n\n  const handleQuery = async () => {\n    let apiUrl = `https://opentdb.com/api.php?amount=${questionAmount}`;\n\n    setLoading(true);\n    await fetch(apiUrl)\n      .then((res) => res.json())\n      .then((response) => {\n        setQuestions(response.results);\n        setLoading(false);\n      });\n\n  }\n  return <Button variant=\"success\" className=\"popup-btn\" onClick={handleQuery} size=\"lg\">{props.text} &#8594;</Button>;\n}\nexport default FetchButton;","import React from 'react';\nimport FetchButton from \"./FetchButton\";\nimport { Modal } from \"react-bootstrap\";\n\nconst Popup = () => {\n\n  const popupText = `<p> This quiz consists of 10 multiple - choice questions. No data will be collected on the website regarding your responses or how many times you take the quiz. Keep the following in mind:</p><ul><li>Each question in the quiz is of multiple-choice or \"true or false\" format. Read each question carefully, and click on the option to select the option.</li><li>After responding to a question, click on the \"Next\" button at the bottom to go to the next question and \"Previous\" to go to the previous question.</li><li>When you reach last question click \"Submit\" to submit the quiz.</li><li>After Submit you are able to see the questions with your response.</li></ul><p>To start, click the <strong>\"Take the Quiz\"</strong> button. When finished, click the <strong>\"Submit Quiz\"</strong> button.</p>`;\n  return (\n    <>\n      <Modal show size=\"lg\" centered>\n        <Modal.Header>\n          <Modal.Title>Quiz Instruction</Modal.Title>\n        </Modal.Header>\n        <Modal.Body dangerouslySetInnerHTML={{ __html: popupText }} />\n        <Modal.Footer>\n          <FetchButton text=\"Take the Quiz\" />\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n}\n\nexport default Popup","import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Card, Button } from 'react-bootstrap';\n\nconst decodeHTML = function (html) {\n  const txt = document.createElement('textarea')\n  txt.innerHTML = html\n  return txt.value\n}\n\nfunction Question() {\n  const [questions, setQuestions] = useState(useSelector(state => state.questions));\n  const [selectedAnswer, setSelectedAnswer] = useState(null)\n  const score = useSelector(state => state.options.score)\n  const [answerSelected, setAnswerSelected] = useState(false)\n  const questionIndex = useSelector(state => state.options.index)\n  const encodedQuestions = useSelector((state) => state.questions)\n  const questionStatus = useSelector((state) => state.questionStatus)\n  const dispatch = useDispatch()\n  const question = questions[questionIndex]\n  const answer = question.correct_answer\n  const [options, setOptions] = useState([])\n\n  const getRandomInt = max => {\n    return Math.floor(Math.random() * Math.floor(max));\n  }\n\n  useEffect(() => {\n    const decodedQuestions = encodedQuestions.map(q => {\n      return {\n        ...q,\n        question: decodeHTML(q.question),\n        correct_answer: decodeHTML(q.correct_answer),\n        incorrect_answers: q.incorrect_answers.map(a => decodeHTML(a))\n      }\n    })\n\n    setQuestions(decodedQuestions)\n  }, [encodedQuestions])\n\n  useEffect(() => {\n    if (!question) {\n      return;\n    }\n    let answers = [...question.incorrect_answers]\n    answers.splice(getRandomInt(question.incorrect_answers.length), 0, question.correct_answer)\n\n    setOptions(answers)\n  }, [question])\n\n  const handleListItemClick = event => {\n    setAnswerSelected(true)\n    setSelectedAnswer(event.target.textContent)\n\n    if (event.target.textContent === answer) {\n      dispatch({\n        type: 'SET_SCORE',\n        score: score + 1,\n      })\n\n    }\n    else {\n      dispatch({\n        type: 'SET_QUESTION_STATUS',\n        questionStatus: event.target.textContent\n      })\n    }\n\n    questionStatus[questionIndex] = event.target.textContent;\n  }\n\n  const handleQuesNavigation = event => {\n    if (event.target.name === 'next') {\n      if (questionIndex + 1 <= questions.length) {\n        setSelectedAnswer(null)\n        dispatch({\n          type: 'SET_INDEX',\n          index: questionIndex + 1,\n        })\n      }\n    } else {\n      if (questionIndex - 1 >= 0) {\n        setSelectedAnswer(null)\n        dispatch({\n          type: 'SET_INDEX',\n          index: questionIndex - 1,\n        })\n      }\n    }\n    setAnswerSelected(false);\n  }\n\n  const getClass = option => {\n    if (option === questionStatus[questionIndex]) {\n      return 'selected';\n    }\n\n    if (!answerSelected) {\n      return ``;\n    }\n\n    if (option === selectedAnswer) {\n      return `selected`\n    }\n  }\n\n  return (\n    <Card className=\"text-center questions\" bg=\"light\">\n      <Card.Header>Question {questionIndex + 1} / <b>{questions.length}</b></Card.Header>\n      <Card.Body>\n        <Card.Title>{question.question}</Card.Title>\n        <Card.Text>\n          <ul className=\"option-list\">\n            {options.map((option, i) => (\n              <li key={i} onClick={handleListItemClick} className={getClass(option)}>\n                {option}\n              </li>\n            ))}\n          </ul>\n        </Card.Text>\n        {questionIndex > 0 && <Button name='previous' variant=\"secondary\" className=\"mr-2\" onClick={handleQuesNavigation}>Previous</Button>}\n        <Button name='next' variant=\"primary\" onClick={handleQuesNavigation}>{questionIndex + 1 < questions.length ? 'Next' : 'Submit Quiz'}</Button>\n      </Card.Body>\n    </Card>\n  )\n}\nexport default Question;","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { Card, Table } from 'react-bootstrap'\n\nconst decodeHTML = function (html) {\n  const txt = document.createElement('textarea')\n  txt.innerHTML = html\n  return txt.value\n}\n\nfunction FinalScreen() {\n  const { score, amount_of_questions } = useSelector((state) => state.options)\n  const { questions, questionStatus } = useSelector((state) => state)\n\n  const checkStatus = (index) => {\n    const selected = questionStatus[index];\n\n    if (selected === questions[index].correct_answer) {\n      return 'CORRECT'\n    }\n    else if (selected === null || selected === undefined) {\n      return 'SKIPPED'\n    }\n    else {\n      return 'INCORRECT'\n    }\n  }\n\n  return (\n    <Card className=\"text-center\" bg=\"light\">\n      <Card.Header>Final Score: {score}/{amount_of_questions}</Card.Header>\n      <Card.Body>\n        <Card.Text>\n          <Table striped bordered hover>\n            <thead>\n              <tr>\n                <th>#</th>\n                <th>Question</th>\n                <th>Attempt Status</th>\n              </tr>\n            </thead>\n            <tbody>\n              {questions.map((question, index) => (\n                <tr key={index}>\n                  <td>{index + 1}</td>\n                  <td>{decodeHTML(question.question)}</td>\n                  <td>{checkStatus(index)}</td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        </Card.Text>\n      </Card.Body>\n    </Card>\n  )\n}\nexport default FinalScreen","import './App.css';\nimport { useSelector } from 'react-redux';\nimport Popup from './components/Popup';\nimport Question from './components/Question';\nimport FinalScreen from './components/FinalScreen';\n\nfunction App() {\n\n  const { questions } = useSelector((state) => state);\n  const { index, amount_of_questions } = useSelector((state) => state.options);\n\n  const dynamicUpdate = () => {\n    if (index === amount_of_questions) return <FinalScreen />;\n    else if (questions.length > 0) return <Question />;\n    else return <Popup />;\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"app-container\">\n        {dynamicUpdate()}\n      </div>\n    </div>\n  );\n}\nexport default App;\n","const initState = {\n  options: {\n    loading: false,\n    amount_of_questions: 10,\n    index: 0,\n    score: 0\n  },\n  questions: [],\n  questionStatus: []\n}\n\nconst Reducer = (state = initState, action) => {\n  switch (action.type) {\n\n    case \"CHANGE_LOADING\":\n      return {\n        ...state,\n        options: {\n          ...state.options,\n          loading: action.value\n        }\n      }\n\n    case \"SET_QUESTIONS\":\n      return {\n        ...state,\n        questions: action.questions\n      }\n\n    case \"SET_INDEX\":\n      return {\n        ...state,\n        options: {\n          ...state.options,\n          index: action.index\n        }\n      }\n\n    case \"SET_SCORE\":\n      return {\n        ...state,\n        options: {\n          ...state.options,\n          score: action.score\n        }\n      }\n\n    default:\n      return state\n  }\n}\nexport default Reducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Reducer from './Reducer'\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\n\nconst store = createStore(Reducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}